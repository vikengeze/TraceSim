#include "cache.h"
#include <cmath>

#define TABLE_SIZE 128
#define ASSOC 128
#define DEBUG 0
#define INVALID 33333333

class INFO_TRACKER{
	public:
		uint64_t pc;
		uint64_t previous_vpn;
		uint64_t stride;
		int sign;
		int state;
		uint64_t timestamp;
		INFO_TRACKER(){
			pc = 0;
			previous_vpn = 0;
			stride = INVALID;
			sign = 1;
			timestamp = 0;
		}
};	

INFO_TRACKER tracker[(int)pow(2.0, ceil(log2(TABLE_SIZE/ASSOC)))][ASSOC];

uint64_t time_c;

void show_table(){
	int x = TABLE_SIZE / ASSOC;
	for(int i=0; i<x; i++){
		for(int j=0; j<ASSOC; j++){
			cout << tracker[i][j].pc << " " << tracker[i][j].previous_vpn << " " << tracker[i][j].stride << " " << tracker[i][j].sign << " " << tracker[i][j].timestamp << "||";
		}
		cout << endl;
	}
}

void CACHE::stlb_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " STLB -- PC/IP Based Arbitrary Stride Prefetcher (ASP)" << endl;
}

void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, int answer, int warmup, int * free_indexes, uint64_t instr_id, int iflag)
{
	uint64_t index, bits, current_vpn, pf_addr, new_stride;
	int i, flag = 0, empty = 0, free_bit = 0, cache_line_position, cache_line_position_n, acc, new_sign;
	time_c++; 

	current_vpn = addr;
	bits = ceil(log2(TABLE_SIZE/ASSOC));
	index = ip & ((1 << bits) - 1);

	for(i=0; i<ASSOC; i++){
		if(ip == tracker[index][i].pc){
			tracker[index][i].timestamp = time_c;

			if(current_vpn < tracker[index][i].previous_vpn){
				new_stride = tracker[index][i].previous_vpn - current_vpn;
				new_sign = -1;
			}
			else{
				new_stride = current_vpn - tracker[index][i].previous_vpn;
				new_sign = 1;
			}

			if((new_stride == tracker[index][i].stride) && (new_sign == tracker[index][i].sign))
				tracker[index][i].state++;
			else{
				tracker[index][i].state = 0;
				tracker[index][i].stride = new_stride;
				tracker[index][i].sign = new_sign;
			}

			if(tracker[index][i].state >= 2){
				if(answer == -1){
					cache_line_position = (current_vpn & 0x07);
					if(ENABLE_FP){
						if(((cache_line_position + tracker[index][i].sign * tracker[index][i].stride)<8) && ((cache_line_position + tracker[index][i].sign * tracker[index][i].stride) >= 0))
							free_bit = 1;
					}
				}

				if(CLOUD_SUITE)
					pf_addr = current_vpn + tracker[index][i].sign * tracker[index][i].stride; // * 512;
				else
					pf_addr = current_vpn + tracker[index][i].sign * tracker[index][i].stride;

				prefetch_page(ip, addr, pf_addr, FILL_L2, 0, free_bit, free_bit, 0, instr_id, type, iflag,0,0,0);
			}

			tracker[index][i].previous_vpn = current_vpn;
			break;
		}

		if(tracker[index][i].pc == 0)
			empty = i;
	}

	if(i == ASSOC){
		if(empty == 0){
			uint64_t lru_min = tracker[index][0].timestamp;
			int lru_victim = 0;
			for(int m=1; m<ASSOC; m++){
				if(tracker[index][m].timestamp < lru_min){
					lru_min = tracker[index][m].timestamp;
					lru_victim = m;
				}
			}
			tracker[index][lru_victim].pc = ip;
			tracker[index][lru_victim].previous_vpn = current_vpn;
			tracker[index][lru_victim].stride = INVALID;
			tracker[index][lru_victim].sign = 1;
			tracker[index][lru_victim].timestamp = time_c;
			tracker[index][lru_victim].state = 0;
		}
		else{
			tracker[index][empty].pc = ip;
			tracker[index][empty].previous_vpn = current_vpn;
			tracker[index][empty].stride = INVALID;
			tracker[index][empty].sign = 1;
			tracker[index][empty].timestamp = time_c;
			tracker[index][empty].state = 0;
		}
	}

	if(DEBUG){
		show_table();
	}
}

void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr)
{

}

void CACHE::stlb_prefetcher_final_stats(uint64_t prefetches, uint64_t hits, uint64_t misses, uint64_t swap, uint64_t dupli, uint64_t free, uint64_t real, uint64_t * mmu_cache_demand_hits, uint64_t * mmu_cache_prefetch_hits, uint64_t * rfhits, uint64_t * free_hits, uint64_t mr[4][4], uint64_t stlb_misses[2])
{
	cout << endl << "*******************************************" << endl;
	cout << "CPU " << cpu << " STLB -- PC/IP Based Arbitrary Stride Prefetcher (ASP) final stats" << endl;
	cout << "*******************************************" << endl;

	cout << endl << "-------------------------------------------" << endl;
	cout << "D-STLB MISSES: " << stlb_misses[0] << endl;
	cout << "I-STLB MISSES: " << stlb_misses[1] << endl;
	cout << "-------------------------------------------" << endl;

	cout << endl << "-------------------------------------------" << endl;
	cout << "PQ hits: " << hits << endl; 
	cout << "PQ misses: " << misses << endl;
	cout << "-------------------------------------------" << endl;
}

